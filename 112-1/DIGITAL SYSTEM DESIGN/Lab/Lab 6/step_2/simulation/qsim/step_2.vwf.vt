// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2023 21:50:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    step_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module step_2_vlg_sample_tst(
	A,
	B,
	C,
	D,
	sampler_tx
);
input  A;
input  B;
input  C;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module step_2_vlg_check_tst (
	F_POS,
	F_SOP,
	sampler_rx
);
input  F_POS;
input  F_SOP;
input sampler_rx;

reg  F_POS_expected;
reg  F_SOP_expected;

reg  F_POS_prev;
reg  F_SOP_prev;

reg  F_POS_expected_prev;
reg  F_SOP_expected_prev;

reg  last_F_POS_exp;
reg  last_F_SOP_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	F_POS_prev = F_POS;
	F_SOP_prev = F_SOP;
end

// update expected /o prevs

always @(trigger)
begin
	F_POS_expected_prev = F_POS_expected;
	F_SOP_expected_prev = F_SOP_expected;
end



// expected F_POS
initial
begin
	F_POS_expected = 1'bX;
end 

// expected F_SOP
initial
begin
	F_SOP_expected = 1'bX;
end 
// generate trigger
always @(F_POS_expected or F_POS or F_SOP_expected or F_SOP)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected F_POS = %b | expected F_SOP = %b | ",F_POS_expected_prev,F_SOP_expected_prev);
	$display("| real F_POS = %b | real F_SOP = %b | ",F_POS_prev,F_SOP_prev);
`endif
	if (
		( F_POS_expected_prev !== 1'bx ) && ( F_POS_prev !== F_POS_expected_prev )
		&& ((F_POS_expected_prev !== last_F_POS_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_POS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_POS_expected_prev);
		$display ("     Real value = %b", F_POS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_POS_exp = F_POS_expected_prev;
	end
	if (
		( F_SOP_expected_prev !== 1'bx ) && ( F_SOP_prev !== F_SOP_expected_prev )
		&& ((F_SOP_expected_prev !== last_F_SOP_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_SOP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_SOP_expected_prev);
		$display ("     Real value = %b", F_SOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_SOP_exp = F_SOP_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module step_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
// wires                                               
wire F_POS;
wire F_SOP;

wire sampler;                             

// assign statements (if any)                          
step_2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.F_POS(F_POS),
	.F_SOP(F_SOP)
);

// A
initial
begin
	repeat(6)
	begin
		A = 1'b0;
		A = #80000 1'b1;
		# 80000;
	end
	A = 1'b0;
end 

// B
initial
begin
	repeat(12)
	begin
		B = 1'b0;
		B = #40000 1'b1;
		# 40000;
	end
	B = 1'b0;
end 

// C
always
begin
	C = 1'b0;
	C = #20000 1'b1;
	#20000;
end 

// D
always
begin
	D = 1'b0;
	D = #10000 1'b1;
	#10000;
end 

step_2_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.sampler_tx(sampler)
);

step_2_vlg_check_tst tb_out(
	.F_POS(F_POS),
	.F_SOP(F_SOP),
	.sampler_rx(sampler)
);
endmodule

