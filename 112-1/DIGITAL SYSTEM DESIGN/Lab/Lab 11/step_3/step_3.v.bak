module step_3(EO, clk, reset, led);
	input dir;
	input clk;
	input reset;
	output reg[3:0] led=4'b1000;
	
	reg[3:0] count;
	
	initial begin
		led = 4'b1000;
	end
	
	always @(posedge clk, negedge reset) begin
		if (!reset) begin
			case (EO)
				1'b0:	led <= ; // Shift right
				1'b1:	led <= {led[2:0], led[3]}; // Shift left
			endcase
			led <= 4'b1000; // Reset the shift register
		end
		else begin
			case (dir)
				1'b0:	led <= {led[0], led[3:1]}; // Shift right
				1'b1:	led <= {led[2:0], led[3]}; // Shift left
			endcase
		end
	end
endmodule

module HEX(number, led)ˇˇㄆ
	input reg[3:0] number;
	output reg[6:0] led;
	
	always @(number, led) begin
		case (number)
			4'b0000: led = 7'b0000001;	// 0
			4'b0001: led = 7'b1001111;	// 1
			4'b0010: led = 7'b0010010;	// 2
			4'b0011: led = 7'b0000110;	// 3
			4'b0100: led = 7'b1001100;	// 4
			4'b0101: led = 7'b0100100;	// 5
			4'b0110: led = 7'b0100000;	// 6
			4'b0111: led = 7'b0001101;	// 7
			4'b1000: led = 7'b0000000;	// 8
			4'b1001: led = 7'b0000100;	// 9
			4'b1010: led = 7'b0001000;	// A
			4'b1011: led = 7'b1100000;	// B
			4'b1100: led = 7'b0110001;	// C
			4'b1101: led = 7'b1000010;	// D
			4'b1110: led = 7'b0110000;	// E
			4'b1111: led = 7'b0111000;	// F
			default: led = 7'b1111111; 	// default
		endcase
	end
endmodule